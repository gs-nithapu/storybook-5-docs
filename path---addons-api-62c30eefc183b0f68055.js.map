{"version":3,"sources":["webpack:///path---addons-api-62c30eefc183b0f68055.js","webpack:///./.cache/json/addons-api.json"],"names":["webpackJsonp","912","module","exports","data","site","siteMetadata","docSections","basics","guides","configurations","formats","testing","addons","presets","allMarkdownRemark","edges","node","fields","slug","frontmatter","title","id","markdownRemark","html","pathContext"],"mappings":"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","file":"path---addons-api-62c30eefc183b0f68055.js","sourcesContent":["webpackJsonp([241376584419316],{\n\n/***/ 912:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"docSections\":{\"basics\":[\"/basics/introduction/\",\"/basics/writing-stories/\",\"/basics/exporting-storybook/\",\"/basics/faq/\",\"/basics/live-examples/\"],\"guides\":[\"/guides/quick-start-guide/\",\"/guides/slow-start-guide/\",\"/guides/guide-html/\",\"/guides/guide-react/\",\"/guides/guide-react-native/\",\"/guides/guide-vue/\",\"/guides/guide-angular/\",\"/guides/guide-mithril/\",\"/guides/guide-marko/\",\"/guides/guide-ember/\",\"/guides/guide-riot/\",\"/guides/guide-svelte/\",\"/guides/guide-preact/\"],\"configurations\":[\"/configurations/overview/\",\"/configurations/options-parameter/\",\"/configurations/default-config/\",\"/configurations/custom-webpack-config/\",\"/configurations/custom-babel-config/\",\"/configurations/typescript-config/\",\"/configurations/add-custom-head-tags/\",\"/configurations/add-custom-body/\",\"/configurations/serving-static-files/\",\"/configurations/env-vars/\",\"/configurations/theming/\",\"/configurations/cli-options/\",\"/configurations/standalone-options/\"],\"formats\":[\"/formats/component-story-format/\",\"/formats/storiesof-api/\",\"/formats/mdx-syntax/\"],\"testing\":[\"/testing/react-ui-testing/\",\"/testing/structural-testing/\",\"/testing/interaction-testing/\",\"/testing/automated-visual-testing/\",\"/testing/manual-testing/\"],\"addons\":[\"/addons/introduction/\",\"/addons/using-addons/\",\"/addons/writing-addons/\",\"/addons/api/\"],\"presets\":[\"/presets/introduction/\",\"/presets/preset-gallery/\",\"/presets/writing-presets/\"]}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/404/\"},\"frontmatter\":{\"title\":\"\",\"id\":null}}},{\"node\":{\"fields\":{\"slug\":\"/basics/community/\"},\"frontmatter\":{\"title\":\"Community\",\"id\":\"community\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/introduction/\"},\"frontmatter\":{\"title\":\"Introduction\",\"id\":\"introduction\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/introduction/\"},\"frontmatter\":{\"title\":\"Intro to Addons\",\"id\":\"introduction\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/using-addons/\"},\"frontmatter\":{\"title\":\"Using Addons\",\"id\":\"using-addons\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/faq/\"},\"frontmatter\":{\"title\":\"Frequently Asked Questions\",\"id\":\"faq\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/toolbar-guide/\"},\"frontmatter\":{\"title\":\"Toolbar\",\"id\":\"toolbar-guide\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/live-examples/\"},\"frontmatter\":{\"title\":\"Live Examples\",\"id\":\"live-examples\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/exporting-storybook/\"},\"frontmatter\":{\"title\":\"Exporting Storybook as a Static App\",\"id\":\"exporting-storybook\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/add-custom-head-tags/\"},\"frontmatter\":{\"title\":\"Add Custom Head Tags\",\"id\":\"add-custom-head-tags\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/add-custom-body/\"},\"frontmatter\":{\"title\":\"Add Custom Body\",\"id\":\"add-custom-body\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/custom-babel-config/\"},\"frontmatter\":{\"title\":\"Custom Babel Config\",\"id\":\"custom-babel-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/custom-postcss-config/\"},\"frontmatter\":{\"title\":\"Custom Postcss Config\",\"id\":\"custom-postcss-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/cli-options/\"},\"frontmatter\":{\"title\":\"CLI Options\",\"id\":\"cli-options\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/default-config/\"},\"frontmatter\":{\"title\":\"Default Config\",\"id\":\"default-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/serving-static-files/\"},\"frontmatter\":{\"title\":\"Serving Static Files\",\"id\":\"serving-static-files\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/env-vars/\"},\"frontmatter\":{\"title\":\"Using Environment Variables\",\"id\":\"env-vars\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/overview/\"},\"frontmatter\":{\"title\":\"Configuration overview\",\"id\":\"overview\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/standalone-options/\"},\"frontmatter\":{\"title\":\"Standalone Options\",\"id\":\"standalone-options\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/theming/\"},\"frontmatter\":{\"title\":\"Theming Storybook\",\"id\":\"theming\"}}},{\"node\":{\"fields\":{\"slug\":\"/presets/introduction/\"},\"frontmatter\":{\"title\":\"Intro to Presets\",\"id\":\"introduction\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/options-parameter/\"},\"frontmatter\":{\"title\":\"Options Parameter\",\"id\":\"options-parameter\"}}},{\"node\":{\"fields\":{\"slug\":\"/presets/preset-gallery/\"},\"frontmatter\":{\"title\":\"Preset Gallery\",\"id\":\"preset-gallery\"}}},{\"node\":{\"fields\":{\"slug\":\"/presets/writing-presets/\"},\"frontmatter\":{\"title\":\"Writing Presets\",\"id\":\"writing-presets\"}}},{\"node\":{\"fields\":{\"slug\":\"/formats/mdx-syntax/\"},\"frontmatter\":{\"title\":\"MDX Syntax\",\"id\":\"mdx-syntax\"}}},{\"node\":{\"fields\":{\"slug\":\"/formats/component-story-format/\"},\"frontmatter\":{\"title\":\"Component Story Format (CSF)\",\"id\":\"component-story-format\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-ember/\"},\"frontmatter\":{\"title\":\"Storybook for Ember\",\"id\":\"guide-ember\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-angular/\"},\"frontmatter\":{\"title\":\"Storybook for Angular\",\"id\":\"guide-angular\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-html/\"},\"frontmatter\":{\"title\":\"Storybook for HTML\",\"id\":\"guide-html\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-mithril/\"},\"frontmatter\":{\"title\":\"Storybook for Mithril\",\"id\":\"guide-mithril\"}}},{\"node\":{\"fields\":{\"slug\":\"/formats/storiesof-api/\"},\"frontmatter\":{\"title\":\"StoriesOf API\",\"id\":\"storiesof-api\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-rax/\"},\"frontmatter\":{\"title\":\"Storybook for Rax\",\"id\":\"guide-rax\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-marko/\"},\"frontmatter\":{\"title\":\"Storybook for Marko\",\"id\":\"guide-marko\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-preact/\"},\"frontmatter\":{\"title\":\"Storybook for Preact\",\"id\":\"guide-preact\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-react/\"},\"frontmatter\":{\"title\":\"Storybook for React\",\"id\":\"guide-react\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-svelte/\"},\"frontmatter\":{\"title\":\"Storybook for Svelte\",\"id\":\"guide-svelte\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-react-native/\"},\"frontmatter\":{\"title\":\"Storybook for React Native\",\"id\":\"guide-react-native\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-riot/\"},\"frontmatter\":{\"title\":\"Storybook for Riot\",\"id\":\"guide-riot\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-vue/\"},\"frontmatter\":{\"title\":\"Storybook for Vue\",\"id\":\"guide-vue\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/quick-start-guide/\"},\"frontmatter\":{\"title\":\"Quick Start Guide\",\"id\":\"quick-start-guide\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/slow-start-guide/\"},\"frontmatter\":{\"title\":\"Slow Start Guide\",\"id\":\"slow-start-guide\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/react-ui-testing/\"},\"frontmatter\":{\"title\":\"Introduction: React UI Testing\",\"id\":\"react-ui-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/interaction-testing/\"},\"frontmatter\":{\"title\":\"Interaction Testing\",\"id\":\"interaction-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/structural-testing/\"},\"frontmatter\":{\"title\":\"Structural Testing\",\"id\":\"structural-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/manual-testing/\"},\"frontmatter\":{\"title\":\"Manual Testing\",\"id\":\"manual-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/api/\"},\"frontmatter\":{\"title\":\"API\",\"id\":\"api\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/addon-gallery/\"},\"frontmatter\":{\"title\":\"Addon Gallery\",\"id\":\"addon-gallery\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/writing-addons/\"},\"frontmatter\":{\"title\":\"Writing Addons\",\"id\":\"writing-addons\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/writing-stories/\"},\"frontmatter\":{\"title\":\"Writing Stories\",\"id\":\"writing-stories\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/custom-webpack-config/\"},\"frontmatter\":{\"title\":\"Custom Webpack Config\",\"id\":\"custom-webpack-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/typescript-config/\"},\"frontmatter\":{\"title\":\"TypeScript Config\",\"id\":\"typescript-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/automated-visual-testing/\"},\"frontmatter\":{\"title\":\"Automated Visual Testing\",\"id\":\"automated-visual-testing\"}}}]},\"markdownRemark\":{\"html\":\"<h2 id=\\\"core-addon-api\\\"><a href=\\\"#core-addon-api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Core Addon API</h2>\\n<p>This is the core addon API. This is how to get the addon API:</p>\\n<pre><code class=\\\"language-jsx\\\">import { addons } from '@storybook/addons';\\n</code></pre>\\n<p>Have a look at the API methods for more details:</p>\\n<h3 id=\\\"addonsgetchannel\\\"><a href=\\\"#addonsgetchannel\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>addons.getChannel()</h3>\\n<p>Get an instance to the channel where you can communicate with the manager and the preview. You can find this in both the addon register code and in your addon’s wrapper component (where used inside a story).</p>\\n<p>It has a NodeJS <a href=\\\"https://nodejs.org/api/events.html\\\">EventEmitter</a> compatible API. So, you can use it to emit events and listen for events.</p>\\n<h3 id=\\\"addonsregister\\\"><a href=\\\"#addonsregister\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>addons.register()</h3>\\n<p>This method allows you to register an addon and get the storybook API. You can do this only in the Manager App.\\nSee how we can use this:</p>\\n<pre><code class=\\\"language-jsx\\\">import { addons } from '@storybook/addons';\\n\\n// Register the addon with a unique name.\\naddons.register('my-organisation/my-addon', api => {});\\n</code></pre>\\n<p>Now you’ll get an instance to our StorybookAPI. See the <a href=\\\"/addons/api#storybook-api\\\">api docs</a> for Storybook API regarding using that.</p>\\n<h3 id=\\\"addonsadd\\\"><a href=\\\"#addonsadd\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>addons.add()</h3>\\n<p>This method allows you to add a panel to Storybook. (Storybook’s Action Logger is a panel). You can do this only in the Manager App.\\nSee how you can use this method:</p>\\n<pre><code class=\\\"language-jsx\\\">import { addons, types } from '@storybook/addons';\\nimport { AddonPanel } from '@storybook/components';\\n\\nconst MyPanel = () => &#x3C;div>This is a panel.&#x3C;/div>;\\n\\n// give a unique name for the panel\\naddons.add('my-organisation/my-addon/panel', {\\n  title: 'My Addon',\\n  type: types.PANEL,\\n  render: ({ active, key }) => (\\n    &#x3C;AddonPanel active={active} key={key}>\\n      &#x3C;MyPanel />\\n    &#x3C;/AddonPanel>\\n  ),\\n});\\n</code></pre>\\n<p>The render function is called with <code>active</code> and <code>key</code>.</p>\\n<p>When the panel is in focus in the UI, the <code>active</code> will be true.</p>\\n<p>As you can see, you can set any React Component as the panel. Currently, it’s one line of text. But you can do anything you want. You should specify the panel title. It could be a plain text.</p>\\n<h2 id=\\\"makedecorator-api\\\"><a href=\\\"#makedecorator-api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>makeDecorator API</h2>\\n<p>The <code>makeDecorator</code> API can be used to create decorators in the style of the official addons. Use it like so:</p>\\n<pre><code class=\\\"language-jsx\\\">import { makeDecorator } from '@storybook/addons';\\n\\nexport makeDecorator({\\n  name: 'withSomething',\\n  parameterName: 'something',\\n  wrapper: (storyFn, context, { parameters }) => {\\n    // Do something with `parameters`, which are set via { something: ... }\\n\\n    // Note you may alter the story output if you like, although generally that's\\n    // not advised\\n    return storyFn(context);\\n  }\\n})\\n</code></pre>\\n<p>The options to <code>makeDecorator</code> are:</p>\\n<ul>\\n<li><code>name</code>: The name of the export (e.g. <code>withFoo</code>)</li>\\n<li><code>parameterName</code>: The name of the parameter your addon uses. This should be unique.</li>\\n<li><code>skipIfNoParametersOrOptions</code>: Don’t run your decorator if the user hasn’t set options (via <code>.addDecorator(withFoo(options)))</code>) or parameters (<code>.add('story', () => &#x3C;Story/>, { foo: 'param' })</code>, or <code>.addParameters({ foo: 'param' })</code>).</li>\\n<li><code>allowDeprecatedUsage</code>: support the deprecated “wrapper” usage (<code>.add('story', () => withFoo(options)(() => &#x3C;Story/>))</code>).</li>\\n<li><code>wrapper</code>: your decorator function. Takes the <code>storyFn</code>, <code>context</code>, and both the <code>options</code> and <code>parameters</code> (as defined in <code>skipIfNoParametersOrOptions</code> above).</li>\\n</ul>\\n<p>Note if the parameters to a story include <code>{ foo: { disable: true } }</code> (where <code>foo</code> is the <code>parameterName</code> of your addon), your decorator will not be called.</p>\\n<hr>\\n<h2 id=\\\"storybook-hooks\\\"><a href=\\\"#storybook-hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Storybook hooks</h2>\\n<p>Writing addons can be simplified a lot by using these Storybook hooks:</p>\\n<h3 id=\\\"usestorybookstate\\\"><a href=\\\"#usestorybookstate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useStorybookState</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const state = useStorybookState();\\n\\n  return &#x3C;div>do something with storybook's state&#x3C;/div>;\\n}\\n</code></pre>\\n<p>Allows full access to the entire storybook state.\\nYour component will re-render whenever the storybook state changes.</p>\\n<p>If you use this, remember your component wil be re-rendered a lot, and you may need to optimize for that using <code>React.memo</code> or <code>useMemo</code> or <code>PureComponent</code>.</p>\\n<h3 id=\\\"usestorybookapi\\\"><a href=\\\"#usestorybookapi\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useStorybookApi</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const state = useStorybookApi();\\n\\n  return &#x3C;div>do something with storybook's api&#x3C;/div>;\\n}\\n</code></pre>\\n<p>Allows full access to the storybook API.</p>\\n<p>Detail on the storybook api are further down.</p>\\n<h3 id=\\\"usechannel\\\"><a href=\\\"#usechannel\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useChannel</h3>\\n<pre><code class=\\\"language-js\\\">import { STORY_CHANGED } from '@storybook/core-events';\\nexport const Panel = () => {\\n  const emit = useChannel({\\n    STORY_CHANGED: (...args) => console.log(...args),\\n  });\\n\\n  return (\\n    &#x3C;button onClick={() => emit('my-event-type', { some: 'data' })}>\\n      clicking this will emit an event\\n    &#x3C;/button>\\n  );\\n}\\n</code></pre>\\n<p>Allows for both setting subscriptions to events and getting the emitter for emitting custom event unto the channel.</p>\\n<p>The messages can be listened for on both the iframe and the manager side.</p>\\n<h3 id=\\\"useaddonstate\\\"><a href=\\\"#useaddonstate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useAddonState</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const [state, setState] = useAddonState('my/addon-id', 'initial state');\\n\\n  return (\\n    &#x3C;button onClick={() => setState('a new value')}>\\n      the state = \\\"{state}\\\"\\n    &#x3C;/button>\\n  );\\n}\\nexport const Tool = () => {\\n  const [state, setState] = useAddonState('my/addon-id', 'initial state');\\n\\n  return (\\n    &#x3C;button onClick={() => setState('a new value')}>\\n      the state = \\\"{state}\\\"\\n    &#x3C;/button>\\n  );\\n}\\n</code></pre>\\n<p>Extremely useful for addons that need to persist some state.</p>\\n<p>Storybook may unmount your addon component, and so keeping local state, might not work really well.</p>\\n<p>Also some addons consist of multiple parts, some part being in a panel, some in the toolbar etc.</p>\\n<p>With this hook they can all get access to the same bit of state which is persisted even if the components are unmounted.</p>\\n<h3 id=\\\"useparameter\\\"><a href=\\\"#useparameter\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useParameter</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const value = useParameter('parameter-key', 'default value');\\n\\n  return (\\n    &#x3C;div>\\n      for the currently selected story, the parameter for \\\"parameter-key\\\" is:\\n      {value}\\n    &#x3C;/div>\\n  );\\n}\\n</code></pre>\\n<p>This hook gets you the current story’s parameter.</p>\\n<p>If the parameter isn’t set, the default value (second argument) is returned instead.</p>\\n<hr>\\n<h2 id=\\\"storybook-api\\\"><a href=\\\"#storybook-api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Storybook API</h2>\\n<p>Storybook API allows you to access different functionalities of Storybook UI. You can move an instance to the Storybook API when you register an addon.</p>\\n<p>Let’s have a look at API methods.</p>\\n<h3 id=\\\"apiselectstory\\\"><a href=\\\"#apiselectstory\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.selectStory()</h3>\\n<p>With this method, you can select a story via an API. This method accepts two parameters.</p>\\n<ol>\\n<li>story kind name</li>\\n<li>story name (optional)</li>\\n</ol>\\n<p>Let’s say you’ve got a story like this:</p>\\n<pre><code class=\\\"language-jsx\\\">export default {\\n  title: 'heading',\\n};\\n\\nexport const withText = () => &#x3C;h1>Hello world&#x3C;/h1>;\\n</code></pre>\\n<p>This is how you can select the above story:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.selectStory('heading', 'withText');\\n});\\n</code></pre>\\n<h3 id=\\\"apiselectincurrentkind\\\"><a href=\\\"#apiselectincurrentkind\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.selectInCurrentKind()</h3>\\n<p>Same as <code>selectStory</code>, but accepts a story inside current kind as the only parameter:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.selectInCurrentKind('withText');\\n});\\n</code></pre>\\n<h3 id=\\\"apisetqueryparams\\\"><a href=\\\"#apisetqueryparams\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.setQueryParams()</h3>\\n<p>This method allows you to set query string parameters. You can use that as temporary storage for addons. Here’s how you set query params.</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.setQueryParams({\\n    abc: 'this is abc',\\n    bbc: 'this is bbc',\\n  });\\n});\\n</code></pre>\\n<blockquote>\\n<p>If you need to remove a query param, use <code>null</code> for that. For an example, let’s say we need to remove bbc query param. This is how we do it:</p>\\n</blockquote>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.setQueryParams({\\n    bbc: null,\\n  });\\n});\\n</code></pre>\\n<h3 id=\\\"apigetqueryparam\\\"><a href=\\\"#apigetqueryparam\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.getQueryParam()</h3>\\n<p>This method allows you to get a query param set by above API <code>setQueryParams</code>. For example, let’s say we need to get the bbc query param. Then this how we do it:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.getQueryParam('bbc');\\n});\\n</code></pre>\\n<h3 id=\\\"apigeturlstateoverrideparams\\\"><a href=\\\"#apigeturlstateoverrideparams\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.getUrlState(overrideParams)</h3>\\n<p>This method allows you to get application url state with some changed params. For example, if you want to get a link to a particular story:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  const href = api.getUrlState({\\n    selectedKind: 'kind',\\n    selectedStory: 'story',\\n  }).url;\\n});\\n</code></pre>\\n<h3 id=\\\"apioneventname-fn\\\"><a href=\\\"#apioneventname-fn\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.on(eventName, fn)</h3>\\n<p>This method allows you to register a handler function which will be called whenever the user navigates between stories.</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.on('some-event', (eventData) => console.log(eventData));\\n});\\n</code></pre>\",\"fields\":{\"slug\":\"/addons/api/\"},\"frontmatter\":{\"title\":\"API\",\"id\":\"api\"}}},\"pathContext\":{\"slug\":\"/addons/api/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---addons-api-62c30eefc183b0f68055.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"docSections\":{\"basics\":[\"/basics/introduction/\",\"/basics/writing-stories/\",\"/basics/exporting-storybook/\",\"/basics/faq/\",\"/basics/live-examples/\"],\"guides\":[\"/guides/quick-start-guide/\",\"/guides/slow-start-guide/\",\"/guides/guide-html/\",\"/guides/guide-react/\",\"/guides/guide-react-native/\",\"/guides/guide-vue/\",\"/guides/guide-angular/\",\"/guides/guide-mithril/\",\"/guides/guide-marko/\",\"/guides/guide-ember/\",\"/guides/guide-riot/\",\"/guides/guide-svelte/\",\"/guides/guide-preact/\"],\"configurations\":[\"/configurations/overview/\",\"/configurations/options-parameter/\",\"/configurations/default-config/\",\"/configurations/custom-webpack-config/\",\"/configurations/custom-babel-config/\",\"/configurations/typescript-config/\",\"/configurations/add-custom-head-tags/\",\"/configurations/add-custom-body/\",\"/configurations/serving-static-files/\",\"/configurations/env-vars/\",\"/configurations/theming/\",\"/configurations/cli-options/\",\"/configurations/standalone-options/\"],\"formats\":[\"/formats/component-story-format/\",\"/formats/storiesof-api/\",\"/formats/mdx-syntax/\"],\"testing\":[\"/testing/react-ui-testing/\",\"/testing/structural-testing/\",\"/testing/interaction-testing/\",\"/testing/automated-visual-testing/\",\"/testing/manual-testing/\"],\"addons\":[\"/addons/introduction/\",\"/addons/using-addons/\",\"/addons/writing-addons/\",\"/addons/api/\"],\"presets\":[\"/presets/introduction/\",\"/presets/preset-gallery/\",\"/presets/writing-presets/\"]}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/404/\"},\"frontmatter\":{\"title\":\"\",\"id\":null}}},{\"node\":{\"fields\":{\"slug\":\"/basics/community/\"},\"frontmatter\":{\"title\":\"Community\",\"id\":\"community\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/introduction/\"},\"frontmatter\":{\"title\":\"Introduction\",\"id\":\"introduction\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/introduction/\"},\"frontmatter\":{\"title\":\"Intro to Addons\",\"id\":\"introduction\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/using-addons/\"},\"frontmatter\":{\"title\":\"Using Addons\",\"id\":\"using-addons\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/faq/\"},\"frontmatter\":{\"title\":\"Frequently Asked Questions\",\"id\":\"faq\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/toolbar-guide/\"},\"frontmatter\":{\"title\":\"Toolbar\",\"id\":\"toolbar-guide\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/live-examples/\"},\"frontmatter\":{\"title\":\"Live Examples\",\"id\":\"live-examples\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/exporting-storybook/\"},\"frontmatter\":{\"title\":\"Exporting Storybook as a Static App\",\"id\":\"exporting-storybook\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/add-custom-head-tags/\"},\"frontmatter\":{\"title\":\"Add Custom Head Tags\",\"id\":\"add-custom-head-tags\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/add-custom-body/\"},\"frontmatter\":{\"title\":\"Add Custom Body\",\"id\":\"add-custom-body\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/custom-babel-config/\"},\"frontmatter\":{\"title\":\"Custom Babel Config\",\"id\":\"custom-babel-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/custom-postcss-config/\"},\"frontmatter\":{\"title\":\"Custom Postcss Config\",\"id\":\"custom-postcss-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/cli-options/\"},\"frontmatter\":{\"title\":\"CLI Options\",\"id\":\"cli-options\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/default-config/\"},\"frontmatter\":{\"title\":\"Default Config\",\"id\":\"default-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/serving-static-files/\"},\"frontmatter\":{\"title\":\"Serving Static Files\",\"id\":\"serving-static-files\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/env-vars/\"},\"frontmatter\":{\"title\":\"Using Environment Variables\",\"id\":\"env-vars\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/overview/\"},\"frontmatter\":{\"title\":\"Configuration overview\",\"id\":\"overview\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/standalone-options/\"},\"frontmatter\":{\"title\":\"Standalone Options\",\"id\":\"standalone-options\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/theming/\"},\"frontmatter\":{\"title\":\"Theming Storybook\",\"id\":\"theming\"}}},{\"node\":{\"fields\":{\"slug\":\"/presets/introduction/\"},\"frontmatter\":{\"title\":\"Intro to Presets\",\"id\":\"introduction\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/options-parameter/\"},\"frontmatter\":{\"title\":\"Options Parameter\",\"id\":\"options-parameter\"}}},{\"node\":{\"fields\":{\"slug\":\"/presets/preset-gallery/\"},\"frontmatter\":{\"title\":\"Preset Gallery\",\"id\":\"preset-gallery\"}}},{\"node\":{\"fields\":{\"slug\":\"/presets/writing-presets/\"},\"frontmatter\":{\"title\":\"Writing Presets\",\"id\":\"writing-presets\"}}},{\"node\":{\"fields\":{\"slug\":\"/formats/mdx-syntax/\"},\"frontmatter\":{\"title\":\"MDX Syntax\",\"id\":\"mdx-syntax\"}}},{\"node\":{\"fields\":{\"slug\":\"/formats/component-story-format/\"},\"frontmatter\":{\"title\":\"Component Story Format (CSF)\",\"id\":\"component-story-format\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-ember/\"},\"frontmatter\":{\"title\":\"Storybook for Ember\",\"id\":\"guide-ember\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-angular/\"},\"frontmatter\":{\"title\":\"Storybook for Angular\",\"id\":\"guide-angular\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-html/\"},\"frontmatter\":{\"title\":\"Storybook for HTML\",\"id\":\"guide-html\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-mithril/\"},\"frontmatter\":{\"title\":\"Storybook for Mithril\",\"id\":\"guide-mithril\"}}},{\"node\":{\"fields\":{\"slug\":\"/formats/storiesof-api/\"},\"frontmatter\":{\"title\":\"StoriesOf API\",\"id\":\"storiesof-api\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-rax/\"},\"frontmatter\":{\"title\":\"Storybook for Rax\",\"id\":\"guide-rax\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-marko/\"},\"frontmatter\":{\"title\":\"Storybook for Marko\",\"id\":\"guide-marko\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-preact/\"},\"frontmatter\":{\"title\":\"Storybook for Preact\",\"id\":\"guide-preact\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-react/\"},\"frontmatter\":{\"title\":\"Storybook for React\",\"id\":\"guide-react\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-svelte/\"},\"frontmatter\":{\"title\":\"Storybook for Svelte\",\"id\":\"guide-svelte\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-react-native/\"},\"frontmatter\":{\"title\":\"Storybook for React Native\",\"id\":\"guide-react-native\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-riot/\"},\"frontmatter\":{\"title\":\"Storybook for Riot\",\"id\":\"guide-riot\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/guide-vue/\"},\"frontmatter\":{\"title\":\"Storybook for Vue\",\"id\":\"guide-vue\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/quick-start-guide/\"},\"frontmatter\":{\"title\":\"Quick Start Guide\",\"id\":\"quick-start-guide\"}}},{\"node\":{\"fields\":{\"slug\":\"/guides/slow-start-guide/\"},\"frontmatter\":{\"title\":\"Slow Start Guide\",\"id\":\"slow-start-guide\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/react-ui-testing/\"},\"frontmatter\":{\"title\":\"Introduction: React UI Testing\",\"id\":\"react-ui-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/interaction-testing/\"},\"frontmatter\":{\"title\":\"Interaction Testing\",\"id\":\"interaction-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/structural-testing/\"},\"frontmatter\":{\"title\":\"Structural Testing\",\"id\":\"structural-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/manual-testing/\"},\"frontmatter\":{\"title\":\"Manual Testing\",\"id\":\"manual-testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/api/\"},\"frontmatter\":{\"title\":\"API\",\"id\":\"api\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/addon-gallery/\"},\"frontmatter\":{\"title\":\"Addon Gallery\",\"id\":\"addon-gallery\"}}},{\"node\":{\"fields\":{\"slug\":\"/addons/writing-addons/\"},\"frontmatter\":{\"title\":\"Writing Addons\",\"id\":\"writing-addons\"}}},{\"node\":{\"fields\":{\"slug\":\"/basics/writing-stories/\"},\"frontmatter\":{\"title\":\"Writing Stories\",\"id\":\"writing-stories\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/custom-webpack-config/\"},\"frontmatter\":{\"title\":\"Custom Webpack Config\",\"id\":\"custom-webpack-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/configurations/typescript-config/\"},\"frontmatter\":{\"title\":\"TypeScript Config\",\"id\":\"typescript-config\"}}},{\"node\":{\"fields\":{\"slug\":\"/testing/automated-visual-testing/\"},\"frontmatter\":{\"title\":\"Automated Visual Testing\",\"id\":\"automated-visual-testing\"}}}]},\"markdownRemark\":{\"html\":\"<h2 id=\\\"core-addon-api\\\"><a href=\\\"#core-addon-api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Core Addon API</h2>\\n<p>This is the core addon API. This is how to get the addon API:</p>\\n<pre><code class=\\\"language-jsx\\\">import { addons } from '@storybook/addons';\\n</code></pre>\\n<p>Have a look at the API methods for more details:</p>\\n<h3 id=\\\"addonsgetchannel\\\"><a href=\\\"#addonsgetchannel\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>addons.getChannel()</h3>\\n<p>Get an instance to the channel where you can communicate with the manager and the preview. You can find this in both the addon register code and in your addon’s wrapper component (where used inside a story).</p>\\n<p>It has a NodeJS <a href=\\\"https://nodejs.org/api/events.html\\\">EventEmitter</a> compatible API. So, you can use it to emit events and listen for events.</p>\\n<h3 id=\\\"addonsregister\\\"><a href=\\\"#addonsregister\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>addons.register()</h3>\\n<p>This method allows you to register an addon and get the storybook API. You can do this only in the Manager App.\\nSee how we can use this:</p>\\n<pre><code class=\\\"language-jsx\\\">import { addons } from '@storybook/addons';\\n\\n// Register the addon with a unique name.\\naddons.register('my-organisation/my-addon', api => {});\\n</code></pre>\\n<p>Now you’ll get an instance to our StorybookAPI. See the <a href=\\\"/addons/api#storybook-api\\\">api docs</a> for Storybook API regarding using that.</p>\\n<h3 id=\\\"addonsadd\\\"><a href=\\\"#addonsadd\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>addons.add()</h3>\\n<p>This method allows you to add a panel to Storybook. (Storybook’s Action Logger is a panel). You can do this only in the Manager App.\\nSee how you can use this method:</p>\\n<pre><code class=\\\"language-jsx\\\">import { addons, types } from '@storybook/addons';\\nimport { AddonPanel } from '@storybook/components';\\n\\nconst MyPanel = () => &#x3C;div>This is a panel.&#x3C;/div>;\\n\\n// give a unique name for the panel\\naddons.add('my-organisation/my-addon/panel', {\\n  title: 'My Addon',\\n  type: types.PANEL,\\n  render: ({ active, key }) => (\\n    &#x3C;AddonPanel active={active} key={key}>\\n      &#x3C;MyPanel />\\n    &#x3C;/AddonPanel>\\n  ),\\n});\\n</code></pre>\\n<p>The render function is called with <code>active</code> and <code>key</code>.</p>\\n<p>When the panel is in focus in the UI, the <code>active</code> will be true.</p>\\n<p>As you can see, you can set any React Component as the panel. Currently, it’s one line of text. But you can do anything you want. You should specify the panel title. It could be a plain text.</p>\\n<h2 id=\\\"makedecorator-api\\\"><a href=\\\"#makedecorator-api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>makeDecorator API</h2>\\n<p>The <code>makeDecorator</code> API can be used to create decorators in the style of the official addons. Use it like so:</p>\\n<pre><code class=\\\"language-jsx\\\">import { makeDecorator } from '@storybook/addons';\\n\\nexport makeDecorator({\\n  name: 'withSomething',\\n  parameterName: 'something',\\n  wrapper: (storyFn, context, { parameters }) => {\\n    // Do something with `parameters`, which are set via { something: ... }\\n\\n    // Note you may alter the story output if you like, although generally that's\\n    // not advised\\n    return storyFn(context);\\n  }\\n})\\n</code></pre>\\n<p>The options to <code>makeDecorator</code> are:</p>\\n<ul>\\n<li><code>name</code>: The name of the export (e.g. <code>withFoo</code>)</li>\\n<li><code>parameterName</code>: The name of the parameter your addon uses. This should be unique.</li>\\n<li><code>skipIfNoParametersOrOptions</code>: Don’t run your decorator if the user hasn’t set options (via <code>.addDecorator(withFoo(options)))</code>) or parameters (<code>.add('story', () => &#x3C;Story/>, { foo: 'param' })</code>, or <code>.addParameters({ foo: 'param' })</code>).</li>\\n<li><code>allowDeprecatedUsage</code>: support the deprecated “wrapper” usage (<code>.add('story', () => withFoo(options)(() => &#x3C;Story/>))</code>).</li>\\n<li><code>wrapper</code>: your decorator function. Takes the <code>storyFn</code>, <code>context</code>, and both the <code>options</code> and <code>parameters</code> (as defined in <code>skipIfNoParametersOrOptions</code> above).</li>\\n</ul>\\n<p>Note if the parameters to a story include <code>{ foo: { disable: true } }</code> (where <code>foo</code> is the <code>parameterName</code> of your addon), your decorator will not be called.</p>\\n<hr>\\n<h2 id=\\\"storybook-hooks\\\"><a href=\\\"#storybook-hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Storybook hooks</h2>\\n<p>Writing addons can be simplified a lot by using these Storybook hooks:</p>\\n<h3 id=\\\"usestorybookstate\\\"><a href=\\\"#usestorybookstate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useStorybookState</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const state = useStorybookState();\\n\\n  return &#x3C;div>do something with storybook's state&#x3C;/div>;\\n}\\n</code></pre>\\n<p>Allows full access to the entire storybook state.\\nYour component will re-render whenever the storybook state changes.</p>\\n<p>If you use this, remember your component wil be re-rendered a lot, and you may need to optimize for that using <code>React.memo</code> or <code>useMemo</code> or <code>PureComponent</code>.</p>\\n<h3 id=\\\"usestorybookapi\\\"><a href=\\\"#usestorybookapi\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useStorybookApi</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const state = useStorybookApi();\\n\\n  return &#x3C;div>do something with storybook's api&#x3C;/div>;\\n}\\n</code></pre>\\n<p>Allows full access to the storybook API.</p>\\n<p>Detail on the storybook api are further down.</p>\\n<h3 id=\\\"usechannel\\\"><a href=\\\"#usechannel\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useChannel</h3>\\n<pre><code class=\\\"language-js\\\">import { STORY_CHANGED } from '@storybook/core-events';\\nexport const Panel = () => {\\n  const emit = useChannel({\\n    STORY_CHANGED: (...args) => console.log(...args),\\n  });\\n\\n  return (\\n    &#x3C;button onClick={() => emit('my-event-type', { some: 'data' })}>\\n      clicking this will emit an event\\n    &#x3C;/button>\\n  );\\n}\\n</code></pre>\\n<p>Allows for both setting subscriptions to events and getting the emitter for emitting custom event unto the channel.</p>\\n<p>The messages can be listened for on both the iframe and the manager side.</p>\\n<h3 id=\\\"useaddonstate\\\"><a href=\\\"#useaddonstate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useAddonState</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const [state, setState] = useAddonState('my/addon-id', 'initial state');\\n\\n  return (\\n    &#x3C;button onClick={() => setState('a new value')}>\\n      the state = \\\"{state}\\\"\\n    &#x3C;/button>\\n  );\\n}\\nexport const Tool = () => {\\n  const [state, setState] = useAddonState('my/addon-id', 'initial state');\\n\\n  return (\\n    &#x3C;button onClick={() => setState('a new value')}>\\n      the state = \\\"{state}\\\"\\n    &#x3C;/button>\\n  );\\n}\\n</code></pre>\\n<p>Extremely useful for addons that need to persist some state.</p>\\n<p>Storybook may unmount your addon component, and so keeping local state, might not work really well.</p>\\n<p>Also some addons consist of multiple parts, some part being in a panel, some in the toolbar etc.</p>\\n<p>With this hook they can all get access to the same bit of state which is persisted even if the components are unmounted.</p>\\n<h3 id=\\\"useparameter\\\"><a href=\\\"#useparameter\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>useParameter</h3>\\n<pre><code class=\\\"language-js\\\">export const Panel = () => {\\n  const value = useParameter('parameter-key', 'default value');\\n\\n  return (\\n    &#x3C;div>\\n      for the currently selected story, the parameter for \\\"parameter-key\\\" is:\\n      {value}\\n    &#x3C;/div>\\n  );\\n}\\n</code></pre>\\n<p>This hook gets you the current story’s parameter.</p>\\n<p>If the parameter isn’t set, the default value (second argument) is returned instead.</p>\\n<hr>\\n<h2 id=\\\"storybook-api\\\"><a href=\\\"#storybook-api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Storybook API</h2>\\n<p>Storybook API allows you to access different functionalities of Storybook UI. You can move an instance to the Storybook API when you register an addon.</p>\\n<p>Let’s have a look at API methods.</p>\\n<h3 id=\\\"apiselectstory\\\"><a href=\\\"#apiselectstory\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.selectStory()</h3>\\n<p>With this method, you can select a story via an API. This method accepts two parameters.</p>\\n<ol>\\n<li>story kind name</li>\\n<li>story name (optional)</li>\\n</ol>\\n<p>Let’s say you’ve got a story like this:</p>\\n<pre><code class=\\\"language-jsx\\\">export default {\\n  title: 'heading',\\n};\\n\\nexport const withText = () => &#x3C;h1>Hello world&#x3C;/h1>;\\n</code></pre>\\n<p>This is how you can select the above story:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.selectStory('heading', 'withText');\\n});\\n</code></pre>\\n<h3 id=\\\"apiselectincurrentkind\\\"><a href=\\\"#apiselectincurrentkind\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.selectInCurrentKind()</h3>\\n<p>Same as <code>selectStory</code>, but accepts a story inside current kind as the only parameter:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.selectInCurrentKind('withText');\\n});\\n</code></pre>\\n<h3 id=\\\"apisetqueryparams\\\"><a href=\\\"#apisetqueryparams\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.setQueryParams()</h3>\\n<p>This method allows you to set query string parameters. You can use that as temporary storage for addons. Here’s how you set query params.</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.setQueryParams({\\n    abc: 'this is abc',\\n    bbc: 'this is bbc',\\n  });\\n});\\n</code></pre>\\n<blockquote>\\n<p>If you need to remove a query param, use <code>null</code> for that. For an example, let’s say we need to remove bbc query param. This is how we do it:</p>\\n</blockquote>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.setQueryParams({\\n    bbc: null,\\n  });\\n});\\n</code></pre>\\n<h3 id=\\\"apigetqueryparam\\\"><a href=\\\"#apigetqueryparam\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.getQueryParam()</h3>\\n<p>This method allows you to get a query param set by above API <code>setQueryParams</code>. For example, let’s say we need to get the bbc query param. Then this how we do it:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.getQueryParam('bbc');\\n});\\n</code></pre>\\n<h3 id=\\\"apigeturlstateoverrideparams\\\"><a href=\\\"#apigeturlstateoverrideparams\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.getUrlState(overrideParams)</h3>\\n<p>This method allows you to get application url state with some changed params. For example, if you want to get a link to a particular story:</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  const href = api.getUrlState({\\n    selectedKind: 'kind',\\n    selectedStory: 'story',\\n  }).url;\\n});\\n</code></pre>\\n<h3 id=\\\"apioneventname-fn\\\"><a href=\\\"#apioneventname-fn\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>api.on(eventName, fn)</h3>\\n<p>This method allows you to register a handler function which will be called whenever the user navigates between stories.</p>\\n<pre><code class=\\\"language-jsx\\\">addons.register('my-organisation/my-addon', api => {\\n  api.on('some-event', (eventData) => console.log(eventData));\\n});\\n</code></pre>\",\"fields\":{\"slug\":\"/addons/api/\"},\"frontmatter\":{\"title\":\"API\",\"id\":\"api\"}}},\"pathContext\":{\"slug\":\"/addons/api/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/addons-api.json\n// module id = 912\n// module chunks = 241376584419316"],"sourceRoot":""}